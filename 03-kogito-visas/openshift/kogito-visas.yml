---
kind: Template
apiVersion: v1
metadata:
  name: kogito-visas
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      expose: "true"
    name: ${APPLICATION_NAME}
  spec:
    ports:
      - name: http
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      deploymentconfig: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 3600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: ${APPLICATION_NAME}
          app: ${APPLICATION_NAME}
      spec:
        containers:
          - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            imagePullPolicy: IfNotPresent
            name: ${APPLICATION_NAME}
            ports:
              - containerPort: 8080
                name: http
                protocol: TCP
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 30
              timeoutSeconds: 3
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 3
              periodSeconds: 10
              timeoutSeconds: 3
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
            securityContext:
              privileged: false
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /deployments/config
                name: config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
          - configMap:
              defaultMode: 420
              name: ${APPLICATION_CONFIGMAP}
            name: config
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - ${APPLICATION_NAME}
          from:
            kind: ImageStreamTag
            name: "${APPLICATION_NAME}:latest"
        type: ImageChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: Binary
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: "${BUILDER_IMAGE}"
          namespace: "${BUILDER_IMAGE_NAMESPACE}"
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers: []
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec: {}
parameters:
- description: The name for the application.
  name: APPLICATION_NAME
  required: true
  value: kogito-visas
- name: CPU_REQUEST
  required: true
  value: '0.1'
- name: CPU_LIMIT
  required: true
  value: '0.5'
- name: MEMORY_REQUEST
  required: true
  value: '200Mi'
- name: MEMORY_LIMIT
  required: true
  value: '500Mi'
- name: APPLICATION_CONFIGMAP
  required: true
  value: kogito-visas
- name: BUILDER_IMAGE
  required: true
  value: redhat-openjdk18-openshift:1.4
- name: BUILDER_IMAGE_NAMESPACE
  required: true
  value: openshift